Generics
They help in providing type safety.
Generics are a way to create reusable components that can work with any data type.
They allow you to write code that is flexible and can be used with different types without sacrificing type safety.
We can't create instances of generic types.
We can restrict the types that can be used with a generic type by extends keyword.
example: <T extends Number> ; now only number and its subclasses can be used as type arguments.
To pass a type argument where we want user to only pass a subclass of a class, we can use ? extends ClassName.
example:void sum(List<? extends Number> list); now only number and its subclasses can be used as type arguments.
We can also use our own classes as type arguments.

Comparable Interface
The Comparable interface is used to compare two objects of the same type.
It is an interface with generic type.
It has a single method compareTo(T o) which compares the current object with the specified object.
It returns a negative integer, zero, or a positive integer as the current object is less than, equal to, or greater than the specified object.

Lambda Expressions
They are a way to create anonymous functions in Java.
They are in line functions.
They are same as arrow function with implicit return in javascript.
We don't have to write return statement with them.
We can assign lambda functions to interface types.
